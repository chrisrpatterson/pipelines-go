# Go
# Build and test your Go application.
# Add steps that save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger: none

pool:
  vmImage: 'vs2017-win2016'

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOPATH: '$(system.defaultWorkingDirectory)/go' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

steps:
- checkout: self
  path: $(modulePath)

- bash: |
    if [ -f Gopkg.toml ]; then
        curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
        dep ensure
    fi
  displayName: "Install dep"

- script: |
    go version
    go get -v -t -d ./...
    go get github.com/jstemmer/go-junit-report
    go get github.com/axw/gocov/gocov
    go get github.com/AlekSi/gocov-xml
    go get -u gopkg.in/matm/v1/gocov-html
  workingDirectory: '$(modulePath)'
  displayName: 'Get dependencies'
  
- script: |
    go test -v -coverprofile=coverage.txt -covermode count | go-junit-report > junit.xml
    gocov convert coverage.txt > coverage.json    
    type coverage.json | gocov-xml > coverage.xml
    type coverage.json | gocov-html > index.html
    mkdir reports
    move .\junit.xml .\reports\junit.xml
    move .\coverage.xml .\reports\coverage.xml
    move .\index.html .\reports\index.html
  workingDirectory: '$(modulePath)'
  displayName: 'Run unit tests'
  
- script: |
    go build -v -o $(Build.ArtifactStagingDirectory)\pipeline-go.exe
  workingDirectory: '$(modulePath)'
  displayName: 'Build app'

- task: PublishTestResults@2
  inputs:
    testRunner: JUnit
    testResultsFiles: '$(modulePath)/reports/junit.xml'
  condition: always()

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(modulePath)/reports/coverage.xml'
    reportDirectory: '$(modulePath)/reports/'
  condition: always()

- task: PublishPipelineArtifact@0
  inputs:
    artifactName: 'App'
    targetPath: $(Build.ArtifactStagingDirectory)
